*****************************************
单词库： capacity 容量
      element  元素
      iterator 迭代器
      reverse  反转
**************************************
扩展：1 八进制012   十六进制0x19(A B C D E F)  二进制Integer.toBinaryString(2)
    2 左移动扩大 2<<3=2*2^3=16     
       n<<1:代表成倍数增长    ?(如果变量<<=1)
    3 StringBuiled  length()返回此字符序列的长度。该长度是序列中的 16 位 char 数
             一个char 字符2  一个符号 1([abqq, dddd, b, c] 16 )
    4IndexOutOfBoundsException         
****************************************
1线性表:linear list
线性结构：顺序表//***查找和读取性能好***
      空间：  顺序表的存储空间静态分布的，需要一个固定长度的数组，总有部分数组元素被消费。
      时间：顺序表的逻辑顺序和物理存储顺序保持一致，且支持随机存取，查找和读取性能好
非线性结构：链表//***插入，删除性能好***
     空间： 链表的储存空间是动态分布，因此不会有空间浪费，但是要留出一部分空间存储指针要牺牲一部分空间。
     时间：链式结构保存表内的元素，其在插入，删除性能好
2线性表 是数组的加强：当程序有一组结构相同的数据元素需要保存
  a线性表长度可以改变   但数组长度固定           
  b线性表可以插入元素   数组无法插入                   
  c线性表可以删除元素   数组无法删除 数组只能指定=null 但其空间依旧存在            
  d线性表可以搜索指定元素位置                       
  e线性表可以清空元素 
3顺序存储（sequencelist）:用一组地址连续的存储单元来存放线性表的元素  
   a 顺序存储结构来实现线性表的时候线性表中相邻元素的存储地址也是相邻的
   b 存储地址：loc(ai)=loc(a0)+i*b(0<i<n)    ***b是每个数据的存储单元
   c 使用顺序结构实现线性表的时候  通常采用数组保存线性表元素
   d插入:插入元素前要考虑数组的容量System.copyOf(old,index,old,index+1,size-index)
   e删除  :删除后元素出现间隔System.copyOf(old,index+1,old,index,size-index-1)
4链式存储（linklist）:采用一组地址任意的存储单元存放线性表中的数据元素
   a 链式结构的线性表 不会按线性的逻辑顺序来保存数据结构 
   b 每个元素保存一个引用下一个元素的引用（指针）
   c 链表的插入和删除比顺序的很快 但是get(index)和 findIndex("T")则慢
               使用链式表不需要知道数据大小  顺序表必须知道数据大小  
   d 链表公式：每个节点=数据元素+引用下一个节点的引用+引用上一个节点的引用
   e 每个节点的prev 代表前一个节点的引用，只有在双向链表的节点才存在prev引用
               空链表就是头节点null的链表
5单链表的基本运算：单链表不断添加节点的过程：
   1头插法建表：空表不断存入创建新节点，不断地以新节点为头节点，让新节点指向原有的头节点
   2尾部法插入：新节点插入到当前链表的尾上，
                因此需要为链表定义一个引用变量保存链表的最后一个节点
   3查找
               查找第index节点
              指定element 元素 查找是否有等于给定值element的节点
   4插入&&删除
6循环链表：tail.next=header
       有个iterator迭代器
7双向链表：双向链表：
    每个节点有俩prev next  可以双向访问  对称结构克服了单向链表指针单向性的缺点方便插入和删除 
    查找：index<size/2  从header开始 反之从tail开始
  


































                           